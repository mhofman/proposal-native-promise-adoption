<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Native Promise Adoption
stage: 0
contributors: Mathieu Hofman
</pre>

<emu-clause id="sec-ecmascript-data-types-and-values" number="6">
  <h1>ECMAScript Data Types and Values</h1>

  <emu-clause id="sec-ecmascript-language-types" number="1">
    <h1>ECMAScript Language Types</h1>

    <emu-clause id="sec-object-type" number="7">
      <h1>The Object Type</h1>

      <emu-clause id="sec-well-known-intrinsic-objects" number="4">
        <h1>Well-Known Intrinsic Objects</h1>
        <emu-table id="table-well-known-intrinsic-objects" caption="Well-Known Intrinsic Objects" number="6">
          <table>
            <thead>
              <tr>
                <th>
                  Intrinsic Name
                </th>
                <th>
                  Global Name
                </th>
                <th>
                  ECMAScript Language Association
                </th>
              </tr>
            </thead>
            <tr>
              <td>
                <ins>%PromiseThenAction%</ins>
              </td>
              <td>
              </td>
              <td>
                <ins>An internal function object for PerformPromiseThen</ins>
              </td>
            </tr>
          </table>
        </emu-table>
      </emu-clause>
    </emu-clause>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-control-abstraction-objects" number="27">
  <h1>Control Abstraction Objects</h1>

  <emu-clause id="sec-promise-objects" number="2">
    <h1>Promise Objects</h1>

    <emu-clause id="sec-promise-abstract-operations" number="1">
      <h1>Promise Abstract Operations</h1>

      <emu-clause id="sec-createresolvingfunctions" type="abstract operation" number="3">
        <h1>CreateResolvingFunctions ( _promise_ )</h1>

        <emu-clause id="sec-promise-resolve-functions" number="2">
          <h1>Promise Resolve Functions</h1>
          <p>A promise resolve function is an anonymous built-in function that has [[Promise]] and [[AlreadyResolved]] internal slots.</p>
          <p>When a promise resolve function is called with argument _resolution_, the following steps are taken:</p>
          <emu-alg>
            1. Let _F_ be the active function object.
            1. Assert: _F_ has a [[Promise]] internal slot whose value is an Object.
            1. Let _promise_ be _F_.[[Promise]].
            1. Let _alreadyResolved_ be _F_.[[AlreadyResolved]].
            1. If _alreadyResolved_.[[Value]] is *true*, return *undefined*.
            1. Set _alreadyResolved_.[[Value]] to *true*.
            1. If SameValue(_resolution_, _promise_) is *true*, then
              1. Let _selfResolutionError_ be a newly created *TypeError* object.
              1. Perform RejectPromise(_promise_, _selfResolutionError_).
              1. Return *undefined*.
            1. If _resolution_ is not an Object, then
              1. Perform FulfillPromise(_promise_, _resolution_).
              1. Return *undefined*.
            1. <ins>Let _thenAction_ be *null*.</ins>
            1. <ins>If IsPromise(_resolution_) is *true*, then</ins>
              1. <ins>Assert: _resolution_ is an ordinary object.</ins>
              1. <ins>Let _proto_ be ! _resolution_.[[GetPrototypeOf]]().</ins>
              1. <ins>If SameValue(_proto_, %Promise.prototype%) is *true*, set _thenAction_ to %PromiseThenAction%.</ins>
            1. <ins>If _thenAction_ is *null*, then</ins>
              1. Let _then_ be Completion(Get(_resolution_, *"then"*)).
              1. If _then_ is an abrupt completion, then
                1. Perform RejectPromise(_promise_, _then_.[[Value]]).
                1. Return *undefined*.
              1. <del>Let</del><ins>Set</ins> _thenAction_ <del>be</del><ins>to</ins> _then_.[[Value]].
              1. If IsCallable(_thenAction_) is *false*, then
                1. Perform FulfillPromise(_promise_, _resolution_).
                1. Return *undefined*.
            1. Let _thenJobCallback_ be HostMakeJobCallback(_thenAction_).
            1. <ins>NOTE: _thenAction_ may be %PromiseThenAction%, a value never directly accessible to ECMAScript code.</ins>
            1. Let _job_ be NewPromiseResolveThenableJob(_promise_, _resolution_, _thenJobCallback_).
            1. Perform HostEnqueuePromiseJob(_job_.[[Job]], _job_.[[Realm]]).
            1. Return *undefined*.
          </emu-alg>
          <p>The *"length"* property of a promise resolve function is *1*<sub>ùîΩ</sub>.</p>
        </emu-clause>

        <emu-clause id="sec-%promisethenaction%">
          <h1>%PromiseThenAction% ( _onFulfilled_, _onRejected_ )</h1>
          <p>The <dfn>%PromiseThenAction%</dfn> intrinsic function:</p>
          <ul>
            <li>is an anonymous built-in function object that is defined once for each realm.</li>
            <li>is never directly accessible to ECMAScript code.</li>
            <li>is used by the promise resolve functions to adopt the state of the promise passed as the receiver.</li>
            <li>performs the following steps when called:</li>
          </ul>
          <emu-alg>
            1. Let _promise_ be the *this* value.
            1. Assert: IsPromise(_promise_) is *true*.
            1. Return PerformPromiseThen(_promise_, _onFulfilled_, _onRejected_).
          </emu-alg>
        </emu-clause>
      </emu-clause>
    </emu-clause>
  </emu-clause>
</emu-clause>
